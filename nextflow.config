manifest {
  author = 'BCCDC-PHL: Tara Newman. ART: Weichun Huang, Leping Li, Jason R. Myers, Gabor T. Marth'
  description = 'Nextflow for running ART read simuator with modifications for amplicon sequencing and varying amplicon depth.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}

def stringIFY(dir){

  ref_dir_string = params.ref_dir.toString() + '/*'

  return ref_dir_string

}

params {

  illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz']
  fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )

  // Boilerplate options
  directory = false
  prefix = false
  bed = false
  profile = false
  help = false
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
  

  // directory of fastas to convert to amplicons
  ref_dir = 'NO_FILE'
  // turn into search string for Nextflow
  ref_dir_string = stringIFY(params.ref_dir)

  // error model for R1

  model_R1 = 'NO_FILE'

  // error model for R2
  model_R2 = 'NO_FILE'

  // simulated read depths - csv file of individual amplicon depth
  amplicon_depths = 'NO_FILE'
  // vary amplicon depths
  vary_amplicon_depths = false
  // simulated read depth
  depth = 50

  // mean genomic fragment size
  fragment_mean = 600

  // genomic fragment standard deviation
  fragment_sd = 75

  // simulated read length
  read_length = 150


  
}

profiles {
  conda {
     process.conda = "$baseDir/environments/environment.yml"
     if (params.cache) {
       conda.cacheDir = params.cache
     }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withLabel: largecpu {
    cpus = 8
  }
}

timeline {
  enabled = false
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = false
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = false
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = false
  file = "${params.tracedir}/pipeline_dag.svg"
}
